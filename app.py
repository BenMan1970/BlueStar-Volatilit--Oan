# --- START OF FILE app.py (VERSION DE D√âBOGAGE) ---

import streamlit as st
import pandas as pd
import numpy as np
import warnings
from datetime import datetime
from oandapyV20 import API
import oandapyV20.endpoints.instruments as instruments
from fpdf import FPDF
import ta
from scipy.signal import find_peaks
import pytz

warnings.filterwarnings('ignore')

# --- CONFIGURATION DE LA PAGE ---
st.set_page_config(page_title="Screener Debug", layout="wide")

# --- ACC√àS AUX SECRETS OANDA ---
try:
    OANDA_ACCESS_TOKEN = st.secrets["OANDA_ACCESS_TOKEN"]
except KeyError:
    st.error("üîë Secret OANDA_ACCESS_TOKEN non trouv√© !"); st.stop()

# --- CONSTANTES ---
INSTRUMENTS_LIST = ['EUR_USD', 'GBP_USD', 'XAU_USD'] # Liste minimale pour un test rapide
TIMEZONE = 'Europe/Paris'

# ==============================================================================
# 1. FONCTIONS DE CALCUL ET DE LOGIQUE (AVEC D√âBOGAGE)
# ==============================================================================

# ### CORRECTION : La fonction retourne maintenant les donn√©es OU un message d'erreur
@st.cache_data(ttl=10, show_spinner=False) 
def fetch_data_debug(pair, timeframe):
    api = API(access_token=OANDA_ACCESS_TOKEN, environment="practice")
    params = {'granularity': timeframe, 'count': 2, 'price': 'M'}
    try:
        r = instruments.InstrumentsCandles(instrument=pair, params=params)
        api.request(r)
        # Si la requ√™te r√©ussit mais qu'il n'y a pas de bougies, c'est aussi un probl√®me
        if 'candles' not in r.response or not r.response['candles']:
            return f"R√©ponse OK mais pas de bougies pour {pair} sur {timeframe}."
        # Si tout va bien, on retourne "Success"
        return "Success"
    except Exception as e:
        # Si une exception se produit, on retourne le message d'erreur exact
        return f"√âchec API pour {pair} sur {timeframe}: {str(e)}"

# ==============================================================================
# 2. LOGIQUE PRINCIPALE DE D√âBOGAGE
# ==============================================================================
def run_debug_analysis(instruments_list):
    debug_logs = []
    progress_bar = st.progress(0, text="Lancement du test de connexion...")
    
    for i, instrument in enumerate(instruments_list):
        progress_text = f"Test de {instrument.replace('_', '/')}... ({i+1}/{len(instruments_list)})"
        progress_bar.progress((i + 1) / len(instruments_list), text=progress_text)
        
        # On teste une seule timeframe pour √™tre rapide
        result = fetch_data_debug(instrument, 'H1')
        debug_logs.append(result)
        
    progress_bar.empty()
    return debug_logs

# ==============================================================================
# 4. INTERFACE UTILISATEUR DE D√âBOGAGE
# ==============================================================================
st.markdown('<h1 style="text-align: center;">üïµÔ∏è‚Äç‚ôÇÔ∏è Outil de D√©bogage API OANDA</h1>', unsafe_allow_html=True)
st.info("Cette page teste la connexion √† l'API OANDA pour chaque instrument et affiche le r√©sultat brut. Cela nous aidera √† trouver la source du probl√®me.")

if st.button("üöÄ Lancer le test de connexion", use_container_width=True, type="primary"):
    with st.spinner("Test en cours..."):
        st.session_state.debug_logs = run_debug_analysis(INSTRUMENTS_LIST)
        st.session_state.debug_done = True

if 'debug_done' in st.session_state and st.session_state.debug_done:
    st.subheader("R√©sultats du test de connexion :")
    
    success_count = sum(1 for log in st.session_state.debug_logs if log == "Success")
    
    if success_count == len(INSTRUMENTS_LIST):
        st.success("‚úÖ Connexion r√©ussie pour tous les instruments test√©s ! Le probl√®me vient de la logique de calcul des indicateurs.")
    elif success_count > 0:
        st.warning(f"‚ö†Ô∏è Connexion partielle ({success_count}/{len(INSTRUMENTS_LIST)} r√©ussites). Certains instruments √©chouent.")
    else:
        st.error("‚ùå √âchec total de la connexion. Aucune donn√©e n'a pu √™tre r√©cup√©r√©e. Le probl√®me vient probablement de la cl√© API ou d'une restriction du compte.")

    with st.expander("Voir les logs d√©taill√©s pour chaque instrument"):
        for log in st.session_state.debug_logs:
            if log == "Success":
                st.markdown(f"<p style='color:lightgreen;'>- {log}</p>", unsafe_allow_html=True)
            else:
                st.markdown(f"<p style='color:lightcoral;'>- {log}</p>", unsafe_allow_html=True)
