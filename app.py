# --- START OF FILE app.py (VERSION AUTOPSIE) ---

import streamlit as st
import pandas as pd
import numpy as np
import warnings
from datetime import datetime
from oandapyV20 import API
import oandapyV20.endpoints.instruments as instruments
import ta
import pytz

warnings.filterwarnings('ignore')

# --- CONFIGURATION DE LA PAGE ---
st.set_page_config(page_title="Screener Autopsy", page_icon="üî¨", layout="wide")

# --- ACC√àS AUX SECRETS OANDA ---
try:
    OANDA_ACCESS_TOKEN = st.secrets["OANDA_ACCESS_TOKEN"]
except KeyError:
    st.error("üîë Secret OANDA_ACCESS_TOKEN non trouv√© !"); st.stop()

# --- CONSTANTES ---
INSTRUMENTS_LIST = ['EUR_USD', 'GBP_USD', 'USD_JPY', 'XAU_USD'] # Liste minimale pour un test rapide
TIMEZONE = 'Europe/Paris'

# --- FONCTIONS DE CALCUL (INCHANG√âES) ---
@st.cache_data(ttl=10, show_spinner=False) 
def fetch_multi_timeframe_data(pair, timeframes=['D', 'H4', 'H1']):
    api = API(access_token=OANDA_ACCESS_TOKEN, environment="practice")
    all_data = {}
    for tf in timeframes:
        params = {'granularity': tf, 'count': 50, 'price': 'M'}
        try:
            r = instruments.InstrumentsCandles(instrument=pair, params=params)
            api.request(r)
            if 'candles' not in r.response or not r.response['candles']: return None
            data = [{'Time': c['time'], 'Close': float(c['mid']['c']), 'High': float(c['mid']['h']), 'Low': float(c['mid']['l'])} for c in r.response['candles']]
            df = pd.DataFrame(data)
            df['Time'] = pd.to_datetime(df['Time']).dt.tz_localize('UTC').dt.tz_convert(TIMEZONE)
            all_data[tf] = df
        except Exception:
            return None
    return all_data

def calculate_volatility_indicators(df):
    if df is None or len(df) < 30: return None
    df['atr'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'], window=14)
    adx_indicator = ta.trend.ADXIndicator(df['High'], df['Low'], df['Close'], window=14)
    df['adx'] = adx_indicator.adx()
    df['dmi_plus'] = adx_indicator.adx_pos()
    df['dmi_minus'] = adx_indicator.adx_neg()
    # IMPORTANT: On supprime les lignes initiales qui contiennent des NaN
    return df.dropna().reset_index(drop=True)

# ==============================================================================
# 2. LOGIQUE D'AUTOPSIE
# ==============================================================================
def run_autopsy(instruments_list):
    autopsy_reports = []
    progress_bar = st.progress(0, text="Lancement de l'autopsie des donn√©es...")
    
    for i, instrument in enumerate(instruments_list):
        progress_text = f"Analyse de {instrument.replace('_', '/')}... ({i+1}/{len(instruments_list)})"
        progress_bar.progress((i + 1) / len(instruments_list), text=progress_text)
        
        multi_tf_data = fetch_multi_timeframe_data(instrument)
        if multi_tf_data is None: 
            autopsy_reports.append({'Instrument': instrument, 'Statut': '√âchec R√©cup√©ration Donn√©es'})
            continue

        data_H1 = calculate_volatility_indicators(multi_tf_data.get('H1'))
        
        if data_H1 is None or data_H1.empty:
            autopsy_reports.append({'Instrument': instrument, 'Statut': '√âchec Calcul Indicateurs H1'})
            continue
        
        # On prend la derni√®re ligne compl√®te
        last_row_data = data_H1.iloc[-1].to_dict()
        last_row_data['Instrument'] = instrument
        last_row_data['Statut'] = 'OK'
        
        autopsy_reports.append(last_row_data)
        
    progress_bar.empty()
    return pd.DataFrame(autopsy_reports)

# ==============================================================================
# 3. INTERFACE UTILISATEUR DE D√âBOGAGE
# ==============================================================================
st.markdown('<h1 style="text-align: center;">üî¨ Autopsie des Donn√©es OANDA</h1>', unsafe_allow_html=True)
st.warning("Cet outil ne filtre rien. Il affiche les donn√©es brutes de la derni√®re bougie H1 pour chaque instrument apr√®s le calcul des indicateurs. L'objectif est de v√©rifier si les valeurs (ATR, ADX...) sont correctement calcul√©es ou si elles sont nulles (NaN).")

if st.button("üî¨ Lancer l'autopsie", use_container_width=True, type="primary"):
    with st.spinner("Analyse en cours..."):
        st.session_state.autopsy_df = run_autopsy(INSTRUMENTS_LIST)
        st.session_state.autopsy_done = True

if 'autopsy_done' in st.session_state and st.session_state.autopsy_done:
    st.subheader("Rapport d'autopsie :")
    
    df = st.session_state.autopsy_df
    
    if df.empty:
        st.error("√âchec total. M√™me l'outil d'autopsie n'a rien pu analyser. Le probl√®me est tr√®s probablement li√© √† la cl√© API ou √† une indisponibilit√© majeure du service OANDA.")
    else:
        # On r√©organise les colonnes pour une meilleure lisibilit√©
        cols = ['Instrument', 'Statut', 'Time', 'Close', 'atr', 'adx', 'dmi_plus', 'dmi_minus']
        display_cols = [col for col in cols if col in df.columns]
        
        st.dataframe(df[display_cols].set_index('Instrument'), use_container_width=True)

        # Analyse automatique des r√©sultats
        if 'adx' in df.columns and df['adx'].isnull().all():
            st.error("Probl√®me d√©tect√© : La colonne 'adx' ne contient que des valeurs nulles (NaN). Le calcul de l'ADX √©choue syst√©matiquement.")
        elif 'atr' in df.columns and df['atr'].isnull().all():
             st.error("Probl√®me d√©tect√© : La colonne 'atr' ne contient que des valeurs nulles (NaN). Le calcul de l'ATR √©choue syst√©matiquement.")
        else:
            st.success("Les donn√©es semblent √™tre calcul√©es. Si aucune opportunit√© n'appara√Æt dans la version normale, le probl√®me vient des seuils de filtrage qui sont trop stricts pour les conditions de march√© actuelles.")
